#!/bin/bash
#Small wrapper to deal with compilation of the compiler and the stdlib.

export OCAMLRUNPARAM=b

STATUS=0

RUN_DIR="`pwd`"

SCRIPT_DIR=`dirname $(python -c "import os, sys; print os.path.realpath(\"$0\")")`

COMPILER_DIR="$SCRIPT_DIR/compiler"

case $1 in
	debug)
		shift;
		COMPILER=heptc.d.byte
		;;
	native)
		shift;
		COMPILER=heptc.native
		;;
	byte)
		shift;
		COMPILER=heptc.byte
		;;
        *)
		if [ -x $COMPILER_DIR/heptc.byte ]; then COMPILER=heptc.byte
		elif [ -x $COMPILER_DIR/heptc.d.byte ]; then COMPILER=heptc.d.byte
		elif [ -x $COMPILER_DIR/heptc.native ]; then COMPILER=heptc.native
		else COMPILER=heptc.byte
	        fi
		;;
	esac



LIB_DIR="$SCRIPT_DIR/lib"
INCLUDE_DIR="$SCRIPT_DIR/include"

JAVA_LIB_DIR="$LIB_DIR/java"
JAVAC="javac -Xlint:unchecked -cp $JAVA_LIB_DIR:.."

#the symlink
HEPTC="$COMPILER_DIR/$COMPILER"

#compile the compiler
if [ ! -x "$HEPTC" ]
then
    pushd "$COMPILER_DIR" > /dev/null
    ocamlbuild -j 0 "$COMPILER"
    popd > /dev/null
fi

#compile the stdlib
if [ ! -e "$LIB_DIR/pervasives.epci" ] || [ "$HEPTC" -nt "$LIB_DIR/pervasives.epci" ]
then
  pushd "$LIB_DIR" > /dev/null
  "$HEPTC" -nopervasives pervasives.epi
  for i in *.epi; do
	  if [[ $i != "pervasives.epi" ]]
	  then "$HEPTC" "$i"
	  fi
  done
  "$HEPTC" -c -target java -target c *.ept
  popd > /dev/null
fi

function compile
{
  #call the compiler with the passed arguments.
  pushd "$RUN_DIR" > /dev/null
  "$HEPTC" -stdlib "$LIB_DIR" -I "$INCLUDE_DIR" "$@"
  STATUS=$?
  popd > /dev/null
}

function java_compile
{
  for lastarg in "$@";
  do
    base_f=`basename ${lastarg} .ept`
    pushd "java/$(echo ${base_f} | python -c 'print raw_input().capitalize()')" > /dev/null
    ${JAVAC} *.java
    STATUS=$?
    if [[ $STATUS != 0 ]]
    then
	    break
    fi
    popd > /dev/null
  done
}

function c_compile
{
	for lastarg in "$@";
	do
		base_f=`basename ${lastarg} .ept`
		pushd "${base_f}_c" > /dev/null
		heptgcc
		STATUS=$?
		if [[ $STATUS != 0 ]]
		then
			break
		fi
		popd > /dev/null
	done
}

case $1 in
"-h" | "--help" | "-help" )
  echo "Calling <weptc [<type>] [java|c]> <options> [file|-- files]"
  echo "  calls the <type> (debug, native or byte) compiler"
  echo "  if <type> is not provided, it uses any existing one."
  echo "  If the one needed isn't present it will be generated"
  echo "  Adding java|c will generate java|c code and compile it."
  echo "  Any further options are given to the compiler."
  echo "The compiler usage follows:"
  $HEPTC --help
;;
c )
  shift
  compile -target c $@
  if [[ $STATUS == 0 ]]
  then
    if [[ ${#@} == 1 ]]
    then
      c_compile $@
    else
      while [[ ($1 != "--") && (${#@} -gt 1) ]]
      do
        shift
      done
      shift
      c_compile $@
    fi
  fi
;;
java )
  shift
  compile -target java $@
  if [[ $STATUS == 0 ]]
  then
    if [[ ${#@} == 1 ]]
    then
      java_compile $@
    else
      while [[ ($1 != "--") && (${#@} -gt 1) ]]
      do
        shift
      done
      shift
      java_compile $@
    fi
  fi
;;
-- | * )
  compile "$@"
esac

exit $STATUS
