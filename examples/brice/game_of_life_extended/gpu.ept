
const extendedLife_majority : int = 1

const size : int = 32
const osize : int = 42
const nbr : int = 15

const r : int = 4
const b : int = 2 * r + 1

fun mult_add(a : local int^osize^osize; i, j, k, l, acc : int)
    returns(o : int)
  let
    o = a[> i + k <][> j + l <] + acc;
  tel

node life_cell(a : local int^osize^osize; i, j : int)
     returns(o : int)
  var t : int; last k : int = 0;
  let
    t = foldi<<b, b>> mult_add(<a, i, j>) (0);
    automaton
      state Init
        do
          o = a[>i + 4<][>j + 4<];
        until
          o = 1 then Alive
        | true then Dead

      state Alive
        do
          k = 0 fby (k + 1);
          o = t;
        unless
          t < 41 & last k < 20 then Dead
        | t < 36 then Dead

      state Dead
        do
          k = 0 fby (k + 1);
          o = t;
        unless
          t > 40 & last k < 20 then Alive
        | t > 45 then Dead
    end;
  tel

fun newi(i, i2 : int) returns(ni, ni2 : int)
  let
    switch (i2 < r)
      | true do
          ni = (i - 1) % nbr;
          ni2 = size - r + i2;
      | false do
          switch (i2 >= size + r)
            | true do
                ni = (i + 1) % nbr;
                ni2 = i2 - size - r;
            | false do
                ni = i;
                ni2 = i - r;
          end;
    end;
  tel


fun fill_loc(a : global int^size^size^nbr^nbr; i, j, i2, j2 : int) returns(o : int)
  var ni, nj, ni2, nj2 : int;
  let
    (ni, ni2) = newi(i, i2);
    (nj, nj2) = newi(j, j2);
    o = a[>ni<][>nj<][>ni2<][>nj2<];
  tel

node game_of_life(a : global int^size^size^nbr^nbr; i, j : int) returns(o : local int^size^size)
  var a_loc : local int^osize^osize;
  let
    a_loc = pmapi<<osize, osize>> fill_loc(<a, i, j>) ();
    o = pmapi<<size, size>> life_cell(<a_loc>) ();
  tel

kernel game_of_life_par(a : global int^size^size^nbr^nbr) returns(o : global int^size^size^nbr^nbr)
  let
    o = mapi<<nbr, nbr>> game_of_life(<a>) ();
  tel

node aux() returns(o : int^size^size^nbr^nbr)
  var c, d : global int^size^size^nbr^nbr;
  let
    c = (0^size^size^nbr^nbr) fby d;
    d = game_of_life_par(c);
    o = d;
  tel
