
const extendedLife_majority : int = 1

(* should be divisible by tiling *)
const game_size :int = 840
const tiling : int = 15
const size : int = game_size / tiling

(* neighbour *)
const nghb : int = 4
const osize : int = size + 2 * nghb
const block : int = 2 * nghb + 1

fun mult_add(a : int^osize^osize; i, j, k, l, acc : int)
    returns(o : int)
  let
    o = a[> i + k <][> j + l <] + acc;
  tel

node life_cell(a : int^osize^osize; i, j : int)
     returns(o : int)
  var t : int; last k : int = 0;
  let
    t = foldi<<block, block>> mult_add(<a, i, j>) (0);
    automaton
      state Init
        do
          o = a[>i + 4<][>j + 4<];
        until
          o = 1 then Alive
        | true then Dead

      state Alive
        do
          k = 0 fby (k + 1);
          o = t;
        unless
          t < 41 & last k < 20 then Dead
        | t < 36 then Dead

      state Dead
        do
          k = 0 fby (k + 1);
          o = t;
        unless
          t > 40 & last k < 20 then Alive
        | t > 45 then Dead
    end;
  tel

fun newi(i, i2 : int) returns(ni, ni2 : int)
  let
    switch (i2 < nghb)
      | true do
          ni = (i - 1) % tiling;
          ni2 = size - nghb + i2;
      | false do
          switch (i2 >= size + nghb)
            | true do
                ni = (i + 1) % tiling;
                ni2 = i2 - size - nghb;
            | false do
                ni = i;
                ni2 = i - r;
          end;
    end;
  tel


fun fill_loc(a : int^size^size^tiling^tiling; i, j, i2, j2 : int) returns(o : int)
  var ni, nj, ni2, nj2 : int;
  let
    (ni, ni2) = newi(i, i2);
    (nj, nj2) = newi(j, j2);
    o = a[>ni<][>nj<][>ni2<][>nj2<];
  tel

node game_of_life(a : int^size^size^nbr^nbr; i, j : int) returns(o : local int^size^size)
  var a_loc : local int^osize^osize;
  let
    a_loc = pmapi<<osize, osize>> fill_loc(<a, i, j>) ();
    o = pmapi<<size, size>> life_cell(<a_loc>) ();
  tel

node aux() returns()
  var c, d : int^size^size^nbr^nbr;
  let
    c = (0^size^size^nbr^nbr) fby d;
    d = mapi<<nbr, nbr>> game_of_life(<c>) ();
  tel
