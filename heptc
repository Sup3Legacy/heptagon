#!/bin/bash
#Small wrapper to deal with compilation of the compiler and the stdlib.

export OCAMLRUNPARAM=b

STATUS=0

RUN_DIR="`pwd`"

SCRIPT_DIR=`dirname $(python -c "import os, sys; print os.path.realpath(\"$0\")")`

COMPILER_DIR="$SCRIPT_DIR/compiler"

case $1 in
	debug)
		shift;
		COMPILER=heptc.d.byte
		;;
	native)
		shift;
		COMPILER=heptc.native
		;;
	byte)
		shift;
		COMPILER=heptc.byte
		;;
	*)
		if [ -x $COMPILER_DIR/heptc.byte ]; then COMPILER=heptc.byte
		elif [ -x $COMPILER_DIR/heptc.d.byte ]; then COMPILER=heptc.d.byte
		elif [ -x $COMPILER_DIR/heptc.native ]; then COMPILER=heptc.native
		else COMPILER=heptc.byte
	        fi
esac



LIB_DIR="$SCRIPT_DIR/lib"

JAVA_LIB_DIR="$LIB_DIR/java"
JAVAC="javac -Xlint:unchecked -cp $JAVA_LIB_DIR"

#the symlink
HEPTC="$COMPILER_DIR/$COMPILER"

#compile the compiler
if [ ! -x "$HEPTC" ]
then
    pushd "$COMPILER_DIR" > /dev/null
    ocamlbuild -j 0 "$COMPILER"
    popd > /dev/null
fi

#compile the stdlib
if [ ! -e "$LIB_DIR/pervasives.epci" ] || [ "$HEPTC" -nt "$LIB_DIR/pervasives.epci" ]
then
  pushd "$LIB_DIR" > /dev/null
  echo "Recompile pervasives.epci"
  "$HEPTC" -nopervasives pervasives.epi
  for i in *.epi; do
	  if [[ $i != "pervasives.epi" ]]
	  then "$HEPTC" $i
	  fi
  done
  "$HEPTC" -c -target java -target c *.ept
  popd > /dev/null
fi

function compile
{
  #call the compiler with the passed arguments.
  pushd "$RUN_DIR" > /dev/null
  "$HEPTC" -stdlib "$LIB_DIR" "$@"
  STATUS=$?
  popd > /dev/null
}

case $1 in
java )
  shift
  compile -target java "$@"
  if [[ $STATUS = 0 ]]
  then
    #call javac to compile the file given as last argument
    last_arg=$#
    base_f=`basename ${!last_arg} .ept`
    pushd "java/$(echo ${base_f} | python -c 'print raw_input().capitalize()')" > /dev/null
    ${JAVAC}:.. *.java
    popd > /dev/null
  fi
;;
java_m )
  shift
  compile -target java -s main "$@"
  if [[ $STATUS = 0 ]]
  then
    #call javac to compile the file given as last argument
    last_arg=$#
    base_f=`basename ${!last_arg} .ept`
    pushd "java/$(echo ${base_f} | python -c 'print raw_input().capitalize()')" > /dev/null
    ${JAVAC}:.. *.java
    popd > /dev/null
  fi
;;
c99 )
  shift
  set -e
  compile -target c "$@"
  base_f=`basename ${!#} .ept`
  cd ${base_f}_c && cc -std=c99 -I`$HEPTC -where`/c *.c -o ../${base_f}
;;
c )
  shift
  set -e
  compile -target c "$@"
  base_f=`basename ${!#} .ept`
  cd ${base_f}_c && cc -I`$HEPTC -where`/c *.c -o ../${base_f}
;;
-- | * )
  compile "$@"
esac

exit $STATUS
