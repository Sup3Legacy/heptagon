#!/bin/bash
#Small wrapper to deal with compilation of the compiler and the stdlib.

STATUS=0

RUN_DIR="`pwd`"

SCRIPT_DIR=`dirname $(python -c "import os, sys; print os.path.realpath(\"$0\")")`

COMPILER_DIR="$SCRIPT_DIR/compiler"
if [ -x $COMPILER_DIR/heptc.native ];
then
    COMPILER=heptc.native
else
    COMPILER=heptc.byte
fi
COMPILER_DEBUG=heptc.d.byte
LIB_DIR="$SCRIPT_DIR/lib"

JAVA_LIB_DIR="$LIB_DIR/java"
JAVAC="javac -Xlint:unchecked -cp $JAVA_LIB_DIR"

#the symlink
HEPTC="$COMPILER_DIR/$COMPILER"
HEPTC_DEBUG="$COMPILER_DIR/$COMPILER_DEBUG"

#compile the compiler
if [ ! -x "$HEPTC" ]
then
  if [ -x "$HEPTC_DEBUG" ]
  then
    #use the debug
    HEPTC=$HEPTC_DEBUG
  else
    pushd "$COMPILER_DIR" > /dev/null
    ocamlbuild -j 0 "$COMPILER"
    popd > /dev/null
  fi
fi

#compile the stdlib
if [ ! -e "$LIB_DIR/pervasives.epci" ] || [ "$HEPTC" -nt "$LIB_DIR/pervasives.epci" ]
then
  pushd "$LIB_DIR" > /dev/null
  "$HEPTC" -nopervasives pervasives.epi
  popd > /dev/null
fi

function compile
{
  #call the compiler with the passed arguments.
  pushd "$RUN_DIR" > /dev/null
  "$HEPTC" -stdlib "$LIB_DIR" "$@"
  STATUS=$?
  popd > /dev/null
}

case $1 in
java )
  shift
  compile -target java "$@"
  if [[ $STATUS = 0 ]]
  then
    #call javac to compile the file given as last argument
    last_arg=$#
    base_f=`basename ${!last_arg} .ept`
    pushd "java/$(echo ${base_f} | sed 's/^./\u&/')" > /dev/null
    ${JAVAC}:.. *.java
    popd > /dev/null
  fi
;;
c | cgen )
  if [ $1 = cgen ]
  then
      CGEN=1
  else
      CGEN=0
  fi
  shift
  set -e
  compile -target c "$@"
  base_f=`basename ${!#} .ept`
  # copy template Makefile and edit
  cp `$HEPTC -where`/../tools/Makefile.* ${base_f}_c
  pushd ${base_f}_c > /dev/null
  mv Makefile.tmpl Makefile
  echo "HCDIR=`$HEPTC -where`" >> Makefile.config
  echo "TARGET=${base_f}" >> Makefile.config
  echo "OBJS=`ls *.c | grep -v _main | sed -e 's/\.c/.o/' | tr '\n' ' '`" >> Makefile.config
  if [ ${CGEN} = 0 ]
  then
      if [ -f _main.c ]
      then
          make all ${base_f}
      else
          make all
      fi
  fi
  popd > /dev/null
;;
-- | * )
  compile "$@"
esac

exit $STATUS
