const n:int = 3
const n2:int = 4

node sum_acc (a, acc_in:int) returns (acc_out:int)
let
  acc_out = acc_in + 0 fby a;
tel
(*
node h(a:int^n^n2) returns (m:int)
let
  m = fold<<n,n2>> sum_acc (a, 0);
tel
*)

node hh(a:int^n^n2) returns (m:int^n^n2)
let
(*  m = a[0][1];*)
  m = [ a with [1] = 0^n ]
(*  m = map<<n,n2>> sum_acc (a,a) *)
tel
